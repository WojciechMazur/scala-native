name: Run tests Linux multiarch
on:
  workflow_call:
  pull_request:
  schedule:
    # Every day at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
concurrency:
  group: linux-multiarch-${{ github.head_ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  # Build testing image that would be used to build and run against different platforms
  # Currently only Linux x64 is tested
  build-image:
    if: "github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' || ((github.event_name == 'schedule' || github.event_name == 'workflow_call') && github.repository == 'scala-native/scala-native')"
    name: Build image
    runs-on: ubuntu-22.04
    outputs:
      image-name: ${{ steps.build-image.outputs.image-base-name }}
    strategy:
      matrix:
        arch: [linux-arm64, linux-x86, linux-armv7, linux-riscv32,	linux-riscv64	]

    steps:
      - uses: actions/checkout@v4
      # In order to minimize time spend in image build loading we're caching directory of local repository
      # Starting local registry from cache is faster then loading image tars
      # https://dev.to/dtinth/caching-docker-builds-in-github-actions-which-approach-is-the-fastest-a-research-18ei
      # This and next stage (start registry) should be used in every step using built images
      # Images are cached based on content of Dockerfile

      # Cache automatically saves content specified paths after executing all steps defined after this one.
      # It will not update cache on hit.
      - name: Cache docker
        uses: actions/cache@v4
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ matrix.arch }}-${{ hashFiles('ci-docker/Dockerfile', format('ci-docker/env/{0}', matrix.arch)) }}

      # Builds images and saves image base name in output - it allows to re-use it in other steps.
      - name: Build image
        id: build-image
        run: |
          imageBase="scala-native-testing"
          imageName="${imageBase}:${{ matrix.arch }}"
          echo "image-base-name=${imageBase}" >> $GITHUB_OUTPUT
          echo "image-full-name=${imageName}" >> $GITHUB_OUTPUT
          . ./ci-docker/env/${{matrix.arch}}

          docker run -d -p 5000:5000 \
            --restart=always \
            --name registry \
            -v /tmp/docker-registry:/var/lib/registry \
            registry:2 && npx wait-on tcp:5000

          docker pull localhost:5000/${imageName} || { \
            docker buildx ls
            docker run --privileged --rm tonistiigi/binfmt --install all && \
            docker buildx build \
              -t ${imageName} \
              --cache-from=localhost:5000/${imageName} \
              --build-arg BASE_IMAGE="$BASE_IMAGE" \
              --build-arg LLVM_VERSION="$LLVM_VERSION" \
              --build-arg BUILD_DEPS="${BUILD_DEPS}" \
              --build-arg IMAGE_NAME="${IMAGE_NAME}" \
              --build-arg TARGET_EMULATOR="$TARGET_EMULATOR" \
              ci-docker && \
            docker tag $imageName localhost:5000/${imageName} && \
            docker push localhost:5000/${imageName}
          }

  #Main tests grid. Builds and runs tests agains multiple combination of GC, Build mode and Scala Version
  #It can be extended to test against different OS and Arch settings
  test-runtime:
    name: Test runtime
    if: "github.event_name == 'pull_request' || ((github.event_name == 'schedule' || github.event_name == 'workflow_call') && github.repository == 'scala-native/scala-native')"
    runs-on: ubuntu-22.04
    needs: build-image
    env:
      ENABLE_EXPERIMENTAL_COMPILER: true
      SCALANATIVE_TEST_PREFETCH_DEBUG_INFO: 1
    strategy:
      fail-fast: false
      matrix:
        arch: [linux-arm64, linux-x86, linux-armv7 ]
        scala: [3]
        gc: [immix, commix, boehm, none]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}
      - name: Cache docker
        uses: actions/cache@v4
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ matrix.arch }}-${{ hashFiles('ci-docker/Dockerfile', format('ci-docker/env/{0}', matrix.arch)) }}

      - name: Prepare native config
        shell: bash
        # Following envs CROSS_ are always present in docker container
        run: |
          SetConfigTemplate=$(cat << EOM
            nativeConfig ~= { prev =>
              val crossRoot = sys.env("CROSS_ROOT");
              val crossTriple = sys.env("CROSS_TRIPLE");
              val sysRoot: List[String] = {
                assert(java.nio.file.Files.exists(java.nio.file.Paths.get(crossRoot)), "crossroot does not exist");
                assert(java.nio.file.Files.exists(java.nio.file.Paths.get(crossRoot, crossTriple, "sysroot")), "sysroot does not exist");
                List(
                  s"--sysroot=\${crossRoot}/\${crossTriple}/sysroot",
                  s"--gcc-toolchain=\${crossRoot}"
                )
              };
              prev
                .withGC(scalanative.build.GC.${{matrix.gc}})
                .withTargetTriple(crossTriple)
                .withCompileOptions(sysRoot)
                .withLinkingOptions(sysRoot)
            }
          EOM
          )

          echo set-native-config=${SetConfigTemplate} >> $GITHUB_ENV

      # Conditionally disable some of the tests (Scala 2 only)
      - name: Set filters for partests
        shell: bash
        if: ${{ !startsWith(matrix.scala, '3') }}
        run: |
          ignoredTestsFile=scala-partest-junit-tests/src/test/resources/${{matrix.scala}}/DenylistedTests.txt
          echo "" >> ${ignoredTestsFile}
          echo -e "scala/util/SortingTest.scala\n" >> ${ignoredTestsFile}

      - name: Build selected
        env:
          SCALANATIVE_GC: "${{matrix.gc}}"
          # Temporaly excluded due to failures in linux-x86,
          # missing __mulodi4 symbol used in j.l.Math.addExact(Long,Long)
          # testsExt${{env.project-version}}/test;
          # TARGET_EMULATOR uld be provided by run-test-gha.sh
          SCALANATIVE_TEST_DEBUG_SIGNALS: 1
          SCALANATIVE_TEST_PREFETCH_DEBUG_INFO: 1
          TEST_COMMAND: >
            set sandbox.forBinaryVersion("${{env.binary-version}}")/${{env.set-native-config}};
            show sandbox${{env.project-version}}/nativeConfig;
            sandbox${{env.project-version}}/nativeLink;
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 180
          max_attempts: 2
          retry_on: error
          command: ./ci-docker/run-test-gha.sh "${{ needs.build-image.outputs.image-name }}:${{ matrix.arch }}"
      - name: Archive sandbox binary
        uses: actions/upload-artifact@v4
        with:
          name: sandbox-${{ matrix.gc }}-${{ matrix.arch }}
          path: sandbox/.3/target/scala-3.4.2/sandbox

      - name: Run tests
        env:
          SCALANATIVE_GC: "${{matrix.gc}}"
          # Temporaly excluded due to failures in linux-x86,
          # missing __mulodi4 symbol used in j.l.Math.addExact(Long,Long)
          # testsExt${{env.project-version}}/test;
          # TARGET_EMULATOR uld be provided by run-test-gha.sh
          SCALANATIVE_TEST_DEBUG_SIGNALS: 1
          SCALANATIVE_TEST_PREFETCH_DEBUG_INFO: 1
          TEST_COMMAND: >
            eval scala.sys.env.toSeq.sortBy(_._1).foreach(println);
            set sandbox.forBinaryVersion("${{env.binary-version}}")/${{env.set-native-config}};
            set testInterface.forBinaryVersion("${{env.binary-version}}")/${{env.set-native-config}};
            set tests.forBinaryVersion("${{env.binary-version}}")/${{env.set-native-config}};
            set junitTestOutputsNative.forBinaryVersion("${{env.binary-version}}")/${{env.set-native-config}};
            set scalaPartestJunitTests.forBinaryVersion("${{env.binary-version}}")/${{env.set-native-config}};

            show sandbox${{env.project-version}}/nativeConfig;

            sandbox${{env.project-version}}/runUsing $TARGET_EMULATOR -strace;
            testInterface${{env.project-version}}/test;
            testsJVM${{env.project-version}}/test;
            tests${{env.project-version}}/test;
            junitTestOutputsNative${{env.project-version}}/test;
            scalaPartestJunitTests${{env.project-version}}/test
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 180
          max_attempts: 2
          retry_on: error
          command: ./ci-docker/run-test-gha.sh "${{ needs.build-image.outputs.image-name }}:${{ matrix.arch }}"
