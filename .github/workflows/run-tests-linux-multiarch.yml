name: Run tests Linux multiarch
on:
  pull_request:
  push:
    branches:
      - master
concurrency:
  group: linux-multiarch-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  # Build testing image that would be used to build and run against different platforms
  # Currently only Linux x64 is tested
  build-image:
    name: Build image
    runs-on: ubuntu-18.04
    outputs:
      image-name: ${{ steps.build-image.outputs.image-base-name }}
    strategy:
      matrix:
        arch: [arm64v8, ppc64, mips64]

    steps:
      - uses: actions/checkout@v2
      # In order to minimize time spend in image build loading we're caching directory of local repository
      # Starting local registry from cache is faster then loading image tars
      # https://dev.to/dtinth/caching-docker-builds-in-github-actions-which-approach-is-the-fastest-a-research-18ei
      # This and next stage (start registry) should be used in every step using built images
      # Images are cached based on content of Dockerfile

      # Cache automatically saves content specified paths after executing all steps defined after this one.
      # It will not update cache on hit.
      - name: Cache docker
        uses: actions/cache@v1
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ hashFiles('ci-docker/Dockerfile') }}-${{ matrix.arch }}
      - name: Run local image registry
        run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2 && npx wait-on tcp:5000

      # Builds images and saves image base name in output - it allows to re-use it in other steps.
      - name: Build image
        id: build-image
        run: |
          imageBase="scala-native-testing:linux"
          imageName="${imageBase}-${{ matrix.arch }}"
          echo "::set-output name=image-base-name::${imageBase}"
          echo "::set-output name=image-full-name::${imageName}"

          docker run --rm --privileged multiarch/qemu-user-static:register
          docker pull localhost:5000/${imageName} || true
          docker build \
          -t ${imageName} \
          --cache-from=localhost:5000/${imageName} \
          --build-arg TARGET_DOCKER_PLATFORM=${{ matrix.arch}} \
          --build-arg HOST_ARCHITECTURE=amd64  \
          --cpuset-cpus=0 \
          ci-docker

      - name: Store image in cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          imageName=${{ steps.build-image.outputs.image-full-name }}
          docker tag $imageName localhost:5000/${imageName} && \
          docker push localhost:5000/${imageName}

  #Main tests grid. Builds and runs tests agains multiple combination of GC, Build mode and Scala Version
  #It can be extended to test against different OS and Arch settings
  test-runtime:
    name: Test runtime
    runs-on: ubuntu-18.04
    needs: build-image
    strategy:
      fail-fast: false
      matrix:
        arch: [arm64v8, ppc64, mips64]
        scala: [3.1.0, 2.13.7]
        build-mode: [release-fast]
        lto: [thin]
        gc: [immix, commix]
        # Create holes in grid to lower number of tests.
        # Excluded entries should have low impact on overall project coverage
        exclude:
          - scala: 3.1.0
            build-mode: debug
            gc: immix
          - scala: 2.13.7
            build-mode: debug
            gc: commix
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}

      - name: Run tests
        env:
          SCALANATIVE_MODE: ${{ matrix.build-mode }}
          SCALANATIVE_GC: ${{ matrix.gc }}
          SCALANATIVE_OPTIMIZE: true
          SCALANATIVE_LTO: ${{ matrix.lto }}
          SCALA_VERSION: ${{ matrix.scala}}
          TEST_COMMAND: "test-runtime ${{ matrix.scala }}"
        run: ./ci-docker/run-test-gha.sh "${{ needs.build-image.outputs.image-name }}-${{ matrix.arch }}"
