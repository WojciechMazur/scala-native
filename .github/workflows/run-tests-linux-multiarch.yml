name: Run tests Linux multiarch
on:
  pull_request:
  push:
    branches:
      - main
      - 0.4.x
concurrency:
  group: linux-multiarch-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  # Build testing image that would be used to build and run against different platforms
  # Currently only Linux x64 is tested
  build-image:
    name: Build image
    runs-on: ubuntu-20.04
    outputs:
      image-name: ${{ steps.build-image.outputs.image-base-name }}
    strategy:
      matrix:
        arch: [linux-arm64, linux-x86]

    steps:
      - uses: actions/checkout@v3
      # In order to minimize time spend in image build loading we're caching directory of local repository
      # Starting local registry from cache is faster then loading image tars
      # https://dev.to/dtinth/caching-docker-builds-in-github-actions-which-approach-is-the-fastest-a-research-18ei
      # This and next stage (start registry) should be used in every step using built images
      # Images are cached based on content of Dockerfile

      # Cache automatically saves content specified paths after executing all steps defined after this one.
      # It will not update cache on hit.
      - name: Cache docker
        uses: actions/cache@v3
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ hashFiles('ci-docker/Dockerfile') }}-${{matrix.arch}}

      # Builds images and saves image base name in output - it allows to re-use it in other steps.
      - name: Build image
        id: build-image
        run: |
          imageBase="scala-native-testing"
          imageName="${imageBase}:${{ matrix.arch }}"
          echo "image-base-name=${imageBase}" >> $GITHUB_OUTPUT
          echo "image-full-name=${imageName}" >> $GITHUB_OUTPUT
          . ./ci-docker/env/${{matrix.arch}}

          docker run -d -p 5000:5000 \
            --restart=always \
            --name registry \
            -v /tmp/docker-registry:/var/lib/registry \
            registry:2 && npx wait-on tcp:5000

          docker pull localhost:5000/${imageName} || { \
            docker buildx ls
            docker run --privileged --rm tonistiigi/binfmt --install all && \
            docker buildx build \
              -t ${imageName} \
              --cache-from=localhost:5000/${imageName} \
              --build-arg BASE_IMAGE=$BASE_IMAGE \
              --build-arg LLVM_VERSION=$LLVM_VERSION \
              --build-arg BUILD_DEPS="${BUILD_DEPS}" \
              --platform ${BUILD_PLATFORM} \
              ci-docker && \
            docker tag $imageName localhost:5000/${imageName} && \
            docker push localhost:5000/${imageName}
          }

  #Main tests grid. Builds and runs tests agains multiple combination of GC, Build mode and Scala Version
  #It can be extended to test against different OS and Arch settings
  test-runtime:
    name: Test runtime
    runs-on: ubuntu-22.04
    needs: build-image
    strategy:
      fail-fast: false
      matrix:
        arch: [linux-arm64, linux-x86]
        scala: [2.13.10, 3.2.0]
        build-mode: [debug, release-fast]
        lto: [none, thin]
        gc: [boehm, immix, commix]
        # Create holes in grid to lower number of tests.
        # Excluded entries should have low impact on overall project coverage
        # include:
        #   - lto: none
        #     build-mode: debug
        #     arch: linux-arm64
        #   - lto: none
        #     build-mode: debug
        #     arch: linux-x86
        exclude:
          # Immix does not suppoort Immix/Commix GCs
          - gc: immix
            arch: linux-x86
          - gc: commix
            arch: linux-x86
          # Release without LTO produces 1 big file taking long to compile, especially when emulated
          - build-mode: release-fast
            lto: none
          - build-mode: debug
            lto: thin
          # Reduce ammount of builds combinations
          - gc: immix
            lto: none
          - gc: immix
            build-mode: debug
          - gc: immix
            scala: 2.13.10
          - gc: commix
            lto: none
          - gc: commix
            build-mode: debug
          - gc: commix
            scala: 3.2.0
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}
      - name: Cache docker
        uses: actions/cache@v3
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ hashFiles('ci-docker/Dockerfile') }}-${{matrix.arch}}
     
      - name: Prepare native config
        shell: bash
        if: ${{ !contains(matrix.arch, 'linux-x86') }}
        # We cannot use either `set every nativeConfig ~= _` or `set tests3/nativeConfig ~= _`
        # Becouse of that we need to build it whole config from scratch
        # There is no other way for passing compile and linking opts (we ignore deprecated sbt keys)
        # Following envs CROSS_ are always present in docker container
        run: |
          targetEnv='sys.env("CROSS_TRIPLE")'
          target='${sys.env("CROSS_TRIPLE")}'
          crossRoot='${sys.env("CROSS_ROOT")}'

          sysRootFlag="Some(sys.process.stringSeqToProcess(Seq(sys.env(\"CROSS_ROOT\") + \"/bin/\" + sys.env(\"CROSS_TRIPLE\") + \"-gcc\", \"-print-sysroot\")).!!.trim).filter(_.nonEmpty).map(s => List(s\"--sysroot=\${s}\", s\"--gcc-toolchain=${crossRoot}\")).getOrElse(List.empty)"
          useLdFlg=\"-fuse-ld=lld\"
          crossOptions="$sysRootFlag ++ List($useLdFlg)"

          emptyConfig="scalanative.build.NativeConfig.empty"
          withMode="withMode(scalanative.build.Mode.${{matrix.build-mode}})"
          withGC="withGC(scalanative.build.GC.${{matrix.gc}})"
          withLTO="withLTO(scalanative.build.LTO.${{matrix.lto}})"
          withToolchain="withClang(scalanative.build.Discover.clang()).withClangPP(scalanative.build.Discover.clangpp())"
          withOpts="withEmbedResources(true).withOptimize(true).withCheck(true).withCheckFatalWarnings(true)"
          withTarget="withTargetTriple(${targetEnv})"
          withCompileOpts="withCompileOptions(scalanative.build.Discover.compileOptions() ++ $crossOptions)"
          withLinkingOpts="withLinkingOptions(scalanative.build.Discover.linkingOptions() ++ $crossOptions)"
          config="$emptyConfig.$withMode.$withGC.$withLTO.$withToolchain.$withOpts.$withTarget.$withCompileOpts.$withLinkingOpts"

          echo set-native-config=set every nativeConfig := ${config} >> $GITHUB_ENV

      # Conditionally disable some of the tests (Scala 2 only)
      - name: Set filters for partests
        shell: bash
        if: ${{ !startsWith(matrix.scala, '3.') }}
        run: |
          ignoredTestsFile=scala-partest-junit-tests/src/test/resources/${{matrix.scala}}/BlacklistedTests.txt
          echo "" >> ${ignoredTestsFile}
          echo -e "scala/util/SortingTest.scala\n" >> ${ignoredTestsFile}

      - name: Run tests
        env:
          SCALANATIVE_MODE: "${{matrix.build-mode}}"
          SCALANATIVE_GC: "${{matrix.gc}}"
          SCALANATIVE_LTO: "${{matrix.lto}}"
          # Temporaly excluded due to failures in linux-x86,
          # missing __mulodi4 symbol used in j.l.Math.addExact(Long,Long)
          # testsExt${{env.project-version}}/test;
          TEST_COMMAND: >
            ${{env.set-native-config}};
            show sandbox${{env.project-version}}/nativeConfig;
            sandbox${{env.project-version}}/run;
            testsJVM${{env.project-version}}/test;
            tests${{env.project-version}}/test;
            junitTestOutputsNative${{env.project-version}}/test;
            scalaPartestJunitTests${{env.project-version}}/test
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 180
          max_attempts: 2
          retry_on: error
          command: ./ci-docker/run-test-gha.sh "${{ needs.build-image.outputs.image-name }}:${{ matrix.arch }}" ${{ matrix.scala }} ${{env.project-version}}
