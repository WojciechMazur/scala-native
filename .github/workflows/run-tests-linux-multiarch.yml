name: Run tests Linux multiarch
on:
  pull_request:
  push:
    branches:
      - main
      - 0.4.x
concurrency:
  group: linux-multiarch-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  # Build testing image that would be used to build and run against different platforms
  # Currently only Linux x64 is tested
  build-image:
    name: Build image
    runs-on: ubuntu-20.04
    outputs:
      image-name: ${{ steps.build-image.outputs.image-base-name }}
    strategy:
      matrix:
        arch: [linux-arm64, linux-x86]

    steps:
      - uses: actions/checkout@v3
      # In order to minimize time spend in image build loading we're caching directory of local repository
      # Starting local registry from cache is faster then loading image tars
      # https://dev.to/dtinth/caching-docker-builds-in-github-actions-which-approach-is-the-fastest-a-research-18ei
      # This and next stage (start registry) should be used in every step using built images
      # Images are cached based on content of Dockerfile

      # Cache automatically saves content specified paths after executing all steps defined after this one.
      # It will not update cache on hit.
      - name: Cache docker
        uses: actions/cache@v3
        with:
          path: /tmp/docker-registry
          key: docker-registry-${{ hashFiles('ci-docker/Dockerfile') }}-${{matrix.arch}}

      # Builds images and saves image base name in output - it allows to re-use it in other steps.
      - name: Build image
        id: build-image
        run: |
          imageBase="scala-native-testing"
          imageName="${imageBase}:${{ matrix.arch }}"
          echo "image-full-name=${imageName}" >> $GITHUB_OUTPUT
          . ./ci-docker/env/${{matrix.arch}}

          docker run -d -p 5000:5000 \
            --restart=always \
            --name registry \
            -v /tmp/docker-registry:/var/lib/registry \
            registry:2 &&  npx wait-on tcp:5000

          docker pull localhost:5000/${imageName} || \
            docker buildx ls && \
            docker run --privileged --rm tonistiigi/binfmt --install all && \
            docker buildx build \
              -t ${imageName} \
              --cache-from=localhost:5000/${imageName} \
              --build-arg BASE_IMAGE=$BASE_IMAGE \
              --build-arg LLVM_VERSION=$LLVM_VERSION \
              --platform ${BUILD_PLATFORM} \
              ci-docker && \
            docker tag $imageName localhost:5000/${imageName} && \
            docker push localhost:5000/${imageName}

  #Main tests grid. Builds and runs tests agains multiple combination of GC, Build mode and Scala Version
  #It can be extended to test against different OS and Arch settings
  test-runtime:
    name: Test runtime
    runs-on: ubuntu-22.04
    needs: build-image
    strategy:
      fail-fast: false
      matrix:
        arch: [linux-arm64, linux-x86]
        scala: [2.13.10, 3.2.0]
        build-mode: [releaseFast]
        lto: [thin, none]
        gc: [boehm, immix, commix]
        # Create holes in grid to lower number of tests.
        # Excluded entries should have low impact on overall project coverage
        exclude:
          - gc: immix
            lto: none
          - gc: commix
            lto: thin
          - gc: boehm
            arch: linux-arm64
          # Immix does not suppoort Immix/Commix GCs
          - gc: immix
            arch: linux-x86
          - gc: commix
            arch: linux-x86
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/linux-setup-env
        with:
          scala-version: ${{matrix.scala}}

      # Conditionally disable some of the tests (Scala 2 only)
      - name: Set filters for partests
        shell: bash
        if: ${{ !startsWith(matrix.scala, '3.') }}
        run: |
          ignoredTestsFile=scala-partest-junit-tests/src/test/resources/${{matrix.scala}}/BlacklistedTests.txt
          echo "" >> ${ignoredTestsFile}
          echo -e "scala/util/SortingTest.scala\n" >> ${ignoredTestsFile}

      - name: Run tests
        env:
          # Limit commands only to native tests, tests would use amd64 JDK anyway
          TEST_COMMAND: >
            show sandbox${{env.project-version}}/nativeConfig;
            tests${{env.project-version}}/test;
            testsExt${{env.project-version}}/test;
            junitTestOutputsNative${{env.project-version}}/test;
            scalaPartestJunitTests${{env.project-version}}/test
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 180
          max_attempts: 2
          retry_on: error
          command: ./ci-docker/run-test-gha.sh "${{ needs.build-image.outputs.image-name }}:${{ matrix.arch }}" ${{ matrix.scala }}
