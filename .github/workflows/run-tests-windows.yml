name: Run Windows tests
on:
  pull_request:
  push:
    branches:
      - master

jobs:
  compile-gc:
    name: Compile GCs
    runs-on: windows-2019
    strategy:
      matrix: 
        gc: [
        {name: none,    include: [shared]},
        {name: immix,   include: [shared, immix_commix]},
        {name: commix,  include: [shared, immix_commix]}
        ]
    steps:
      - uses: actions/checkout@v2
      
      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: |
            C:\Program Files\LLVM\
          key: ${{ runner.os }}-llvm-6
      - name: Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: choco install llvm --version=6.0.1 

      - name: Add LLVM on Path
        run: echo "${env:ProgramFiles}\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: Assert clang installed and on path
        run: clang --version

      - name: Compile GCs
        run: |
          $gcRoot     = (Resolve-Path -Path ".\nativelib\src\main\resources\scala-native\gc").Path 
          $gcDir      = "$gcRoot\${{matrix.gc.name}}"
          $sharedDirs = @("${{ join(matrix.gc.include, '", "') }}") | %{Join-Path "$gcRoot\" $_}
          $includes   = $sharedDirs | %{Join-Path "-I" $_}
          Get-ChildItem -Path $gcRoot -Include *.c -Recurse -File `
          | ForEach-Object {clang -std=gnu11 -Wno-override-module $includes -c "$_" --verbose}
          Get-ChildItem -Path $gcRoot -Include *.cpp -Recurse -File `
          | ForEach-Object {clang++ -std=c++14 -Wno-override-module $includes -c "$_" --verbose}

        
      # - uses: actions/setup-scala@v1
      #   with: 
      #     java-version: 

      #   # Build cache for library dependencies and SBT. Its crucial for performance to always load this cache
      # # We're loading it here, when build, to always have ready cache in the big matrix of runtime tests.
      # # Cache is generated based on Scala binary version on contents of build

      # - name: Test tools
      #   run: sbt "++ ${{ matrix.scala }} -v" "-no-colors" "-J-Xmx3G" test-tools

      # # Pre-compile and cache results for the most time consuming projects and it dependencies too speed up execution in next phases
      # # We cannot use `compile` because sbtScalaNative does not crossCompile
      # - name: Compile
      #   run: sbt "++ ${{ matrix.scala }} -v" "-no-colors" "-J-Xmx3G" \
      #     "tests/Test/compile" "testsExt/Test/compile" \
      #     "junitTestOutputsNative/Test/compile" "junitTestOutputsJVM/Test/compile"

