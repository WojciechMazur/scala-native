package scala.scalanative
package unsafe

import scala.runtime.BoxesRunTime._
import scala.reflect.ClassTag

import scalanative.annotation.alwaysinline

import scalanative.runtime._
import scalanative.runtime.Intrinsics._
import scalanative.runtime.Boxes._

import scalanative.unsigned._

final class Word(private[scalanative] val rawWord: RawWord) {
  @alwaysinline def toByte: Byte   = castRawWordToInt(rawWord).toByte
  @alwaysinline def toChar: Char   = castRawWordToInt(rawWord).toChar
  @alwaysinline def toShort: Short = castRawWordToInt(rawWord).toShort
  @alwaysinline def toInt: Int     = castRawWordToInt(rawWord)
  @alwaysinline def toLong: Long   = castRawWordToLong(rawWord)

  @alwaysinline def toUByte: UByte   = toByte.toUByte
  @alwaysinline def toUShort: UShort = toShort.toUShort
  @alwaysinline def toUInt: UInt     = toInt.toUInt
  @alwaysinline def toULong: ULong   = toLong.toULong
  @alwaysinline def toUWord: UWord   = new UWord(rawWord)

  override def hashCode: Int = java.lang.Long.hashCode(toLong)

  override def equals(other: Any): Boolean =
    (this eq other.asInstanceOf[AnyRef]) || (other match {
      case other: Word =>
        other.rawWord == rawWord
      case _ =>
        false
    })

  override def toString(): String = toLong.toString

  /**
   * Returns the bitwise negation of this value.
   * @example {{{
   * ~5 == 4294967290
   * // in binary: ~00000101 ==
   * //             11111010
   * }}}
   */
  @alwaysinline def unary_~ : Word =
    (~toLong).toWord // TODO(shadaj): intrinsify

  /** Returns the negated version of this value. */
  @alwaysinline def unary_- : Word = 0 - this // TODO(shadaj): intrinsify

  /**
   * Returns this value bit-shifted left by the specified number of bits,
   *         filling in the new right bits with zeroes.
   * @example {{{ 6 << 3 == 48 // in binary: 0110 << 3 == 0110000 }}}
   */
  @alwaysinline def <<(x: Int): Word =
    (toLong << x).toWord // TODO(shadaj): intrinsify

  /**
   * Returns this value bit-shifted left by the specified number of bits,
   *         filling in the new right bits with zeroes.
   * @example {{{ 6 << 3 == 48 // in binary: 0110 << 3 == 0110000 }}}
   */
  @alwaysinline def <<(x: Long): Word =
    (toLong << x).toWord // TODO(shadaj): intrinsify

  /**
   * Returns this value bit-shifted right by the specified number of bits,
   *         filling the new left bits with zeroes.
   * @example {{{ 21 >>> 3 == 2 // in binary: 010101 >>> 3 == 010 }}}
   * @example {{{
   * 4294967275 >>> 3 == 536870909
   * // in binary: 11111111 11111111 11111111 11101011 >>> 3 ==
   * //            00011111 11111111 11111111 11111101
   * }}}
   */
  @alwaysinline def >>>(x: Int): Word =
    (toLong >>> x).toWord // TODO(shadaj): intrinsify

  /**
   * Returns this value bit-shifted right by the specified number of bits,
   *         filling the new left bits with zeroes.
   * @example {{{ 21 >>> 3 == 2 // in binary: 010101 >>> 3 == 010 }}}
   * @example {{{
   * 4294967275 >>> 3 == 536870909
   * // in binary: 11111111 11111111 11111111 11101011 >>> 3 ==
   * //            00011111 11111111 11111111 11111101
   * }}}
   */
  @alwaysinline def >>>(x: Long): Word =
    (toLong >>> x).toWord // TODO(shadaj): intrinsify

  /**
   * Returns this value bit-shifted left by the specified number of bits,
   *         filling in the right bits with the same value as the left-most bit of this.
   * @example {{{
   * 4294967275 >> 3 == 4294967293
   * // in binary: 11111111 11111111 11111111 11101011 >> 3 ==
   * //            11111111 11111111 11111111 11111101
   * }}}
   */
  @inline final def >>(x: Int): Word = (toLong >> x).toWord

  /**
   * Returns this value bit-shifted left by the specified number of bits,
   *         filling in the right bits with the same value as the left-most bit of this.
   * @example {{{
   * 4294967275 >> 3 == 4294967293
   * // in binary: 11111111 11111111 11111111 11101011 >> 3 ==
   * //            11111111 11111111 11111111 11111101
   * }}}
   */
  @inline final def >>(x: Long): Word = (toLong >> x).toWord

  % cmpOps = [('==', 'Returns `true` if this value is equal to x, `false` otherwise.'),
  %           ('!=', 'Returns `true` if this value is not equal to x, `false` otherwise.'),
  %           ('<', 'Returns `true` if this value is less than x, `false` otherwise.'),
  %           ('<=', 'Returns `true` if this value is less than or equal to x, `false` otherwise.'),
  %           ('>', 'Returns `true` if this value is greater than x, `false` otherwise.'),
  %           ('>=', 'Returns `true` if this value is greater than or equal to x, `false` otherwise.')]
  % for (op, doc) in cmpOps:
  /** ${doc} */
  @alwaysinline def ${op}(x: Byte): Boolean = this ${op} x.toWord

  /** ${doc} */
  @alwaysinline def ${op}(x: Short): Boolean = this ${op} x.toWord

  /** ${doc} */
  @alwaysinline def ${op}(x: Int): Boolean = this ${op} x.toWord

  /** ${doc} */
  @alwaysinline def ${op}(x: Long): Boolean = this.toLong ${op} x

  /** ${doc} */
  @alwaysinline def ${op}(other: Word): Boolean =
    this.toLong ${op} other.toLong // TODO(shadaj): intrinsify

  % end
  % binOps = [('&', 'andRawWords', 'Returns the bitwise AND of this value and `x`.'),
  %           ('|', 'orRawWords', 'Returns the bitwise OR of this value and `x`.'),
  %           ('^', 'xorRawWords', 'Returns the bitwise XOR of this value and `x`.'),
  %           ('+', 'addRawWords', 'Returns the sum of this value and `x`.'),
  %           ('-', 'subRawWords', 'Returns the difference of this value and `x`.'),
  %           ('*', 'multRawWords', 'Returns the product of this value and `x`.'),
  %           ('/', 'divRawWords', 'Returns the quotient of this value and `x`.'),
  %           ('%', 'modRawWords', 'Returns the remainder of the division of this value by `x`.')]
  % for (op, intrinsic, doc) in binOps:
  /** ${doc} */
  @alwaysinline def ${op}(x: Byte): Word = this ${op} x.toWord

  /** ${doc} */
  @alwaysinline def ${op}(x: Short): Word = this ${op} x.toWord

  /** ${doc} */
  @alwaysinline def ${op}(x: Int): Word = this ${op} x.toWord

  /** ${doc} */
  @alwaysinline def ${op}(x: Long): Long = this.toLong ${op} x

  /** ${doc} */
  @alwaysinline def ${op}(other: Word): Word =
    new Word(${intrinsic}(rawWord, other.rawWord))

  % end
}

object Word {
  @alwaysinline implicit def byteToWord(x: Byte): Word =
    new Word(castIntToRawWord(x))
  @alwaysinline implicit def charToWord(x: Char): Word =
    new Word(castIntToRawWord(x))
  @alwaysinline implicit def shortToWord(x: Short): Word =
    new Word(castIntToRawWord(x))
  @alwaysinline implicit def intToWord(x: Int): Word =
    new Word(castIntToRawWord(x))
}
