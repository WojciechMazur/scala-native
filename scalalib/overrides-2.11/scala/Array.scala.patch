--- 2.11.12/scala/Array.scala
+++ overrides-2.11/scala/Array.scala
@@ -17,0 +17,1 @@
+import scala.collection.mutable.WrappedArray
@@ -18,2 +19,1 @@
-/** Contains a fallback builder for arrays when the element type
- *  does not have a class tag. In that case a generic array is built.
+/** Contains a fallback builder for arrays when the element type *  does not have a class tag. In that case a generic array is built.
@@ -23,2 +23,1 @@
-  /** A builder factory that generates a generic array.
-   *  Called instead of `Array.newBuilder` if the element type of an array
+  /** A builder factory that generates a generic array.   *  Called instead of `Array.newBuilder` if the element type of an array
@@ -28,2 +27,1 @@
-   *  implicit search is always successful.
-   */
+   *  implicit search is always successful.   */
@@ -33,2 +31,1 @@
-      def apply() = ArraySeq.newBuilder[T]
-    }
+      def apply() = ArraySeq.newBuilder[T]    }
@@ -38,2 +35,1 @@
- *  For example:
- *  {{{
+ *  For example: *  {{{
@@ -43,2 +39,1 @@
- *  }}}
- *  where the array objects `a`, `b` and `c` have respectively the values
+ *  }}} *  where the array objects `a`, `b` and `c` have respectively the values
@@ -51,9 +46,9 @@
-  val emptyBooleanArray = new Array[Boolean](0)
-  val emptyByteArray    = new Array[Byte](0)
-  val emptyCharArray    = new Array[Char](0)
-  val emptyDoubleArray  = new Array[Double](0)
-  val emptyFloatArray   = new Array[Float](0)
-  val emptyIntArray     = new Array[Int](0)
-  val emptyLongArray    = new Array[Long](0)
-  val emptyShortArray   = new Array[Short](0)
-  val emptyObjectArray  = new Array[Object](0)
+  @inline def emptyBooleanArray = new Array[Boolean](0)
+  @inline def emptyByteArray    = new Array[Byte](0)
+  @inline def emptyCharArray    = new Array[Char](0)
+  @inline def emptyDoubleArray  = new Array[Double](0)
+  @inline def emptyFloatArray   = new Array[Float](0)
+  @inline def emptyIntArray     = new Array[Int](0)
+  @inline def emptyLongArray    = new Array[Long](0)
+  @inline def emptyShortArray   = new Array[Short](0)
+  @inline def emptyObjectArray  = new Array[Object](0)
@@ -61,2 +56,1 @@
-  implicit def canBuildFrom[T](implicit t: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] =
-    new CanBuildFrom[Array[_], T, Array[T]] {
+  implicit def canBuildFrom[T](implicit t: ClassTag[T]): CanBuildFrom[Array[_], T, Array[T]] =    new CanBuildFrom[Array[_], T, Array[T]] {
@@ -66,1 +60,0 @@
-
@@ -71,1 +64,0 @@
-
@@ -75,2 +67,1 @@
-                       destPos : Int,
-                       length : Int) {
+                       destPos : Int,                       length : Int) {
@@ -80,2 +71,1 @@
-    while (i < srcUntil) {
-      array_update(dest, j, array_apply(src, i))
+    while (i < srcUntil) {      array_update(dest, j, array_apply(src, i))
@@ -86,1 +76,0 @@
-
@@ -90,2 +79,1 @@
-   *  except that this also works for polymorphic and boxed arrays.
-   *
+   *  except that this also works for polymorphic and boxed arrays.   *
@@ -120,5 +108,46 @@
-  def apply[T: ClassTag](xs: T*): Array[T] = {
-    val array = new Array[T](xs.length)
-    var i = 0
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
-    array
+  def apply[T: ClassTag](xs: T*): Array[T] = xs match {
+    case xs: WrappedArray.ofBoolean =>
+      val from = xs.array
+      val array = new Array[Boolean](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofByte =>
+      val from = xs.array
+      val array = new Array[Byte](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofShort =>
+      val from = xs.array
+      val array = new Array[Short](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofChar =>
+      val from = xs.array
+      val array = new Array[Char](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofInt =>
+      val from = xs.array
+      val array = new Array[Int](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofLong =>
+      val from = xs.array
+      val array = new Array[Long](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofFloat =>
+      val from = xs.array
+      val array = new Array[Float](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs: WrappedArray.ofDouble =>
+      val from = xs.array
+      val array = new Array[Double](from.length)
+      System.arraycopy(from, 0, array, 0, from.length)
+      array.asInstanceOf[Array[T]]
+    case xs =>
+      val array = new Array[T](xs.length)
+      var i = 0
+      for (x <- xs.iterator) { array(i) = x; i += 1 }
+      array
@@ -126,1 +155,0 @@
-
@@ -132,2 +160,7 @@
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofBoolean =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
@@ -136,1 +169,0 @@
-
@@ -142,2 +174,7 @@
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofByte =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
@@ -146,1 +183,0 @@
-
@@ -152,2 +188,7 @@
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofShort =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
@@ -156,1 +197,0 @@
-
@@ -162,2 +202,7 @@
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofChar =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
@@ -166,1 +211,0 @@
-
@@ -172,2 +216,7 @@
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofInt =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
@@ -176,1 +225,0 @@
-
@@ -182,2 +230,7 @@
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofLong =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
@@ -186,1 +239,0 @@
-
@@ -192,2 +244,7 @@
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofFloat =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
@@ -196,1 +253,0 @@
-
@@ -202,2 +258,7 @@
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofDouble =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
@@ -206,1 +267,0 @@
-
@@ -211,2 +271,7 @@
-    var i = 1
-    for (x <- xs.iterator) { array(i) = x; i += 1 }
+    xs match {
+      case xs: WrappedArray.ofUnit =>
+        System.arraycopy(xs.array, 0, array, 1, xs.array.length)
+      case xs =>
+        var i = 1
+        for (x <- xs.iterator) { array(i) = x; i += 1 }
+    }
@@ -215,1 +280,0 @@
-
@@ -219,2 +283,1 @@
-  /** Creates a 2-dimensional array */
-  def ofDim[T: ClassTag](n1: Int, n2: Int): Array[Array[T]] = {
+  /** Creates a 2-dimensional array */  def ofDim[T: ClassTag](n1: Int, n2: Int): Array[Array[T]] = {
@@ -224,2 +287,1 @@
-    // tabulate(n1)(_ => ofDim[T](n2))
-  }
+    // tabulate(n1)(_ => ofDim[T](n2))  }
@@ -229,2 +291,1 @@
-  /** Creates a 4-dimensional array */
-  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int): Array[Array[Array[Array[T]]]] =
+  /** Creates a 4-dimensional array */  def ofDim[T: ClassTag](n1: Int, n2: Int, n3: Int, n4: Int): Array[Array[Array[Array[T]]]] =
@@ -235,1 +296,0 @@
-
@@ -239,2 +299,1 @@
-   *  @return   the array created from concatenating `xss`
-   */
+   *  @return   the array created from concatenating `xss`   */
@@ -244,2 +303,1 @@
-    for (xs <- xss) b ++= xs
-    b.result()
+    for (xs <- xss) b ++= xs    b.result()
