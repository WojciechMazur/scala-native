--- 2.11.12/scala/reflect/Manifest.scala
+++ overrides-2.11/scala/reflect/Manifest.scala
@@ -91,1 +91,17 @@
-  val Byte: AnyValManifest[Byte] = new AnyValManifest[scala.Byte]("Byte") {
+  @inline def Byte: AnyValManifest[Byte] = ByteManifest
+  @inline def Short: AnyValManifest[Short] = ShortManifest
+  @inline def Char: AnyValManifest[Char] = CharManifest
+  @inline def Int: AnyValManifest[Int] = IntManifest
+  @inline def Long: AnyValManifest[Long] = LongManifest
+  @inline def Float: AnyValManifest[Float] = FloatManifest
+  @inline def Double: AnyValManifest[Double] = DoubleManifest
+  @inline def Boolean: AnyValManifest[Boolean] = BooleanManifest
+  @inline def Unit: AnyValManifest[Unit] = UnitManifest
+  @inline def Any: Manifest[scala.Any] = AnyManifest
+  @inline def Object: Manifest[java.lang.Object] = ObjectManifest
+  @inline def AnyRef: Manifest[scala.AnyRef] = Object.asInstanceOf[Manifest[scala.AnyRef]]
+  @inline def AnyVal: Manifest[scala.AnyVal] = AnyValManifest
+  @inline def Null: Manifest[scala.Null] = NullManifest
+  @inline def Nothing: Manifest[scala.Nothing] = NothingManifest
+
+  private object ByteManifest extends AnyValManifest[scala.Byte]("Byte") {
@@ -93,2 +109,1 @@
-    override def newArray(len: Int): Array[Byte] = new Array[Byte](len)
-    override def newWrappedArray(len: Int): WrappedArray[Byte] = new WrappedArray.ofByte(new Array[Byte](len))
+    override def newArray(len: Int): Array[Byte] = new Array[Byte](len)    override def newWrappedArray(len: Int): WrappedArray[Byte] = new WrappedArray.ofByte(new Array[Byte](len))
@@ -99,1 +114,1 @@
-  val Short: AnyValManifest[Short] = new AnyValManifest[scala.Short]("Short") {
+  private object ShortManifest extends AnyValManifest[scala.Short]("Short") {
@@ -101,2 +116,1 @@
-    override def newArray(len: Int): Array[Short] = new Array[Short](len)
-    override def newWrappedArray(len: Int): WrappedArray[Short] = new WrappedArray.ofShort(new Array[Short](len))
+    override def newArray(len: Int): Array[Short] = new Array[Short](len)    override def newWrappedArray(len: Int): WrappedArray[Short] = new WrappedArray.ofShort(new Array[Short](len))
@@ -107,1 +121,1 @@
-  val Char: AnyValManifest[Char] = new AnyValManifest[scala.Char]("Char") {
+  private object CharManifest extends AnyValManifest[scala.Char]("Char") {
@@ -109,2 +123,1 @@
-    override def newArray(len: Int): Array[Char] = new Array[Char](len)
-    override def newWrappedArray(len: Int): WrappedArray[Char] = new WrappedArray.ofChar(new Array[Char](len))
+    override def newArray(len: Int): Array[Char] = new Array[Char](len)    override def newWrappedArray(len: Int): WrappedArray[Char] = new WrappedArray.ofChar(new Array[Char](len))
@@ -115,1 +128,1 @@
-  val Int: AnyValManifest[Int] = new AnyValManifest[scala.Int]("Int") {
+  private object IntManifest extends AnyValManifest[scala.Int]("Int") {
@@ -117,2 +130,1 @@
-    override def newArray(len: Int): Array[Int] = new Array[Int](len)
-    override def newWrappedArray(len: Int): WrappedArray[Int] = new WrappedArray.ofInt(new Array[Int](len))
+    override def newArray(len: Int): Array[Int] = new Array[Int](len)    override def newWrappedArray(len: Int): WrappedArray[Int] = new WrappedArray.ofInt(new Array[Int](len))
@@ -123,1 +135,1 @@
-  val Long: AnyValManifest[Long] = new AnyValManifest[scala.Long]("Long") {
+  private object LongManifest extends AnyValManifest[scala.Long]("Long") {
@@ -125,2 +137,1 @@
-    override def newArray(len: Int): Array[Long] = new Array[Long](len)
-    override def newWrappedArray(len: Int): WrappedArray[Long] = new WrappedArray.ofLong(new Array[Long](len))
+    override def newArray(len: Int): Array[Long] = new Array[Long](len)    override def newWrappedArray(len: Int): WrappedArray[Long] = new WrappedArray.ofLong(new Array[Long](len))
@@ -131,1 +142,1 @@
-  val Float: AnyValManifest[Float] = new AnyValManifest[scala.Float]("Float") {
+  private object FloatManifest extends AnyValManifest[scala.Float]("Float") {
@@ -133,2 +144,1 @@
-    override def newArray(len: Int): Array[Float] = new Array[Float](len)
-    override def newWrappedArray(len: Int): WrappedArray[Float] = new WrappedArray.ofFloat(new Array[Float](len))
+    override def newArray(len: Int): Array[Float] = new Array[Float](len)    override def newWrappedArray(len: Int): WrappedArray[Float] = new WrappedArray.ofFloat(new Array[Float](len))
@@ -139,1 +149,1 @@
-  val Double: AnyValManifest[Double] = new AnyValManifest[scala.Double]("Double") {
+  private object DoubleManifest extends AnyValManifest[scala.Double]("Double") {
@@ -141,2 +151,1 @@
-    override def newArray(len: Int): Array[Double] = new Array[Double](len)
-    override def newWrappedArray(len: Int): WrappedArray[Double] = new WrappedArray.ofDouble(new Array[Double](len))
+    override def newArray(len: Int): Array[Double] = new Array[Double](len)    override def newWrappedArray(len: Int): WrappedArray[Double] = new WrappedArray.ofDouble(new Array[Double](len))
@@ -147,1 +156,1 @@
-  val Boolean: AnyValManifest[Boolean] = new AnyValManifest[scala.Boolean]("Boolean") {
+  private object BooleanManifest extends AnyValManifest[scala.Boolean]("Boolean") {
@@ -149,2 +158,1 @@
-    override def newArray(len: Int): Array[Boolean] = new Array[Boolean](len)
-    override def newWrappedArray(len: Int): WrappedArray[Boolean] = new WrappedArray.ofBoolean(new Array[Boolean](len))
+    override def newArray(len: Int): Array[Boolean] = new Array[Boolean](len)    override def newWrappedArray(len: Int): WrappedArray[Boolean] = new WrappedArray.ofBoolean(new Array[Boolean](len))
@@ -155,1 +163,1 @@
-  val Unit: AnyValManifest[Unit] = new AnyValManifest[scala.Unit]("Unit") {
+  private object UnitManifest extends AnyValManifest[scala.Unit]("Unit") {
@@ -157,2 +165,1 @@
-    override def newArray(len: Int): Array[Unit] = new Array[Unit](len)
-    override def newWrappedArray(len: Int): WrappedArray[Unit] = new WrappedArray.ofUnit(new Array[Unit](len))
+    override def newArray(len: Int): Array[Unit] = new Array[Unit](len)    override def newWrappedArray(len: Int): WrappedArray[Unit] = new WrappedArray.ofUnit(new Array[Unit](len))
@@ -166,3 +173,3 @@
-  private val ObjectTYPE = classOf[java.lang.Object]
-  private val NothingTYPE = classOf[scala.runtime.Nothing$]
-  private val NullTYPE = classOf[scala.runtime.Null$]
+  @inline private def ObjectTYPE = classOf[java.lang.Object]
+  @inline private def NothingTYPE = classOf[scala.runtime.Nothing$]
+  @inline private def NullTYPE = classOf[scala.runtime.Null$]
@@ -170,1 +177,1 @@
-  val Any: Manifest[scala.Any] = new PhantomManifest[scala.Any](ObjectTYPE, "Any") {
+  private object AnyManifest extends PhantomManifest[scala.Any](ObjectTYPE, "Any") {
@@ -172,2 +179,1 @@
-    override def <:<(that: ClassManifest[_]): Boolean = (that eq this)
-    private def readResolve(): Any = Manifest.Any
+    override def <:<(that: ClassManifest[_]): Boolean = (that eq this)    private def readResolve(): Any = Manifest.Any
@@ -176,1 +182,1 @@
-  val Object: Manifest[java.lang.Object] = new PhantomManifest[java.lang.Object](ObjectTYPE, "Object") {
+  private object ObjectManifest extends PhantomManifest[java.lang.Object](ObjectTYPE, "Object") {
@@ -178,2 +184,1 @@
-    override def <:<(that: ClassManifest[_]): Boolean = (that eq this) || (that eq Any)
-    private def readResolve(): Any = Manifest.Object
+    override def <:<(that: ClassManifest[_]): Boolean = (that eq this) || (that eq Any)    private def readResolve(): Any = Manifest.Object
@@ -182,3 +187,1 @@
-  val AnyRef: Manifest[scala.AnyRef] = Object.asInstanceOf[Manifest[scala.AnyRef]]
-
-  val AnyVal: Manifest[scala.AnyVal] = new PhantomManifest[scala.AnyVal](ObjectTYPE, "AnyVal") {
+  private object AnyValManifest extends PhantomManifest[scala.AnyVal](ObjectTYPE, "AnyVal") {
@@ -186,2 +189,1 @@
-    override def <:<(that: ClassManifest[_]): Boolean = (that eq this) || (that eq Any)
-    private def readResolve(): Any = Manifest.AnyVal
+    override def <:<(that: ClassManifest[_]): Boolean = (that eq this) || (that eq Any)    private def readResolve(): Any = Manifest.AnyVal
@@ -190,1 +192,1 @@
-  val Null: Manifest[scala.Null] = new PhantomManifest[scala.Null](NullTYPE, "Null") {
+  private object NullManifest extends PhantomManifest[scala.Null](NullTYPE, "Null") {
@@ -192,2 +194,1 @@
-    override def <:<(that: ClassManifest[_]): Boolean =
-      (that ne null) && (that ne Nothing) && !(that <:< AnyVal)
+    override def <:<(that: ClassManifest[_]): Boolean =      (that ne null) && (that ne Nothing) && !(that <:< AnyVal)
@@ -197,1 +198,1 @@
-  val Nothing: Manifest[scala.Nothing] = new PhantomManifest[scala.Nothing](NothingTYPE, "Nothing") {
+  private object NothingManifest extends PhantomManifest[scala.Nothing](NothingTYPE, "Nothing") {
@@ -199,2 +200,1 @@
-    override def <:<(that: ClassManifest[_]): Boolean = (that ne null)
-    private def readResolve(): Any = Manifest.Nothing
+    override def <:<(that: ClassManifest[_]): Boolean = (that ne null)    private def readResolve(): Any = Manifest.Nothing
@@ -204,2 +204,1 @@
-    lazy val runtimeClass = value.getClass
-    override lazy val toString = value.toString + ".type"
+    lazy val runtimeClass = value.getClass    override lazy val toString = value.toString + ".type"
@@ -209,2 +208,1 @@
-  def singleType[T <: AnyRef](value: AnyRef): Manifest[T] =
-    new SingletonTypeManifest[T](value)
+  def singleType[T <: AnyRef](value: AnyRef): Manifest[T] =    new SingletonTypeManifest[T](value)
@@ -214,2 +212,1 @@
-    * @note This no-prefix, no-arguments case is separate because we
-    *       it's called from ScalaRunTime.boxArray itself. If we
+    * @note This no-prefix, no-arguments case is separate because we    *       it's called from ScalaRunTime.boxArray itself. If we
@@ -219,2 +216,1 @@
-  def classType[T](clazz: Predef.Class[_]): Manifest[T] =
-    new ClassTypeManifest[T](None, clazz, Nil)
+  def classType[T](clazz: Predef.Class[_]): Manifest[T] =    new ClassTypeManifest[T](None, clazz, Nil)
@@ -224,2 +220,1 @@
-  def classType[T](clazz: Predef.Class[T], arg1: Manifest[_], args: Manifest[_]*): Manifest[T] =
-    new ClassTypeManifest[T](None, clazz, arg1 :: args.toList)
+  def classType[T](clazz: Predef.Class[T], arg1: Manifest[_], args: Manifest[_]*): Manifest[T] =    new ClassTypeManifest[T](None, clazz, arg1 :: args.toList)
@@ -229,2 +224,1 @@
-    */
-  def classType[T](prefix: Manifest[_], clazz: Predef.Class[_], args: Manifest[_]*): Manifest[T] =
+    */  def classType[T](prefix: Manifest[_], clazz: Predef.Class[_], args: Manifest[_]*): Manifest[T] =
