@@ -286,271 +286,283 @@
  */%0A%0Apackage scala%0Apackage reflect%0A%0Aimport java.lang.%7B Class =%3E jClass %7D%0Aimport 
-java.lang.ref.%7BWeakReference =%3E jWeakReference%7D%0A%0Aimport scala.collection.mutable%0Aimport scala.runtime.BoxedUnit
+scala.collection.mutable%0A%0A/* Override for default scala ClassTag due to missing caching using java.lang.Value.ClassValue */
 %0A%0A/**%0A *%0A * A %60ClassTag%5BT%5D%60 stores the erased class of a given type %60T%60, accessi
@@ -1835,389 +1835,189 @@
 with Equals with Serializable %7B%0A%0A  @transient private%5Bscala%5D lazy val emptyArray
-       
 : Array%5BT%5D 
-               = %7B%0A    val componentType =%0A      if (runtimeClass eq java.lang.Void.TYPE) classOf%5BBoxedUnit%5D else runtimeClass%0A    java.lang.reflect.Array.newInstance(componentType, 0).asInstanceOf%5BArray%5BT%5D%5D%0A  %7D
+=%0A    newArray(0)%0A
 %0A  @transient private%5Bscala%5D lazy val emptyWrappedArray: mutable.WrappedArray%5BT%5D
@@ -2626,196 +2626,160 @@
 nt type %60T%60 and length %60len%60 */%0A  override def newArray(len: Int): Array%5BT%5D = %7B%0A
-    if (runtimeClass.isPrimitive) %7B%0A
       runtimeClass match %7B%0A        case java.lang.Integer.TYPE   =%3E new Array%5BIn
@@ -3430,180 +3430,192 @@
 e java.lang.Void.TYPE      =%3E new Array%5BUnit%5D(len).asInstanceOf%5BArray%5BT%5D%5D%0A      
-%7D%0A    %7D else %7B%0A     
+case _                        =%3E
  java.lang.reflect.Array.newInstance(runtimeClass, len).asInstanceOf%5BArray%5BT%5D%5D%0A 
@@ -4779,3245 +4779,2476 @@
 rimitive types and constructor/extractor for ClassTags.%0A */%0Aobject ClassTag %7B%0A  
-private val ObjectTYPE = classOf%5Bjava.lang.Object%5D%0A  private val NothingTYPE = classOf%5Bscala.runtime.Nothing$%5D%0A  private val NullTYPE = classOf%5Bscala.runtime.Null$%5D%0A%0A  val
+@inline def
  Byte    : ClassTag%5Bscala.Byte%5D       = Manifest.Byte%0A  
-val
+@inline def
  Short   : ClassTag%5Bscala.Short%5D      = Manifest.Short%0A  
-val
+@inline def
  Char    : ClassTag%5Bscala.Char%5D       = Manifest.Char%0A  
-val
+@inline def
  Int     : ClassTag%5Bscala.Int%5D        = Manifest.Int%0A  
-val
+@inline def
  Long    : ClassTag%5Bscala.Long%5D       = Manifest.Long%0A  
-val
+@inline def
  Float   : ClassTag%5Bscala.Float%5D      = Manifest.Float%0A  
-val
+@inline def
  Double  : ClassTag%5Bscala.Double%5D     = Manifest.Double%0A  
-val
+@inline def
  Boolean : ClassTag%5Bscala.Boolean%5D    = Manifest.Boolean%0A  
-val
+@inline def
  Unit    : ClassTag%5Bscala.Unit%5D       = Manifest.Unit%0A  
-val
+@inline def
  Any     : ClassTag%5Bscala.Any%5D        = Manifest.Any%0A  
-val
+@inline def
  Object  : ClassTag%5Bjava.lang.Object%5D = Manifest.Object%0A  
-val
+@inline def
  AnyVal  : ClassTag%5Bscala.AnyVal%5D     = Manifest.AnyVal%0A  
-val
+@inline def
  AnyRef  : ClassTag%5Bscala.AnyRef%5D     = Manifest.AnyRef%0A  
-val
+@inline def
  Nothing : ClassTag%5Bscala.Nothing%5D    = Manifest.Nothing%0A  
-val
+@inline def
  Null    : ClassTag%5Bscala.Null%5D       = Manifest.Null%0A%0A  
-private val cacheDisabled = java.lang.Boolean.getBoolean(%22scala.reflect.classtag.cache.disable%22)%0A  private%5Bthis%5D object cache extends ClassValue%5BjWeakReference%5BClassTag%5B_%5D%5D%5D %7B%0A    override def computeValue(runtimeClass: jClass%5B_%5D): jWeakReference%5BClassTag%5B_%5D%5D =%0A      new jWeakReference(computeTag(runtimeClass))%0A%0A    def computeTag(runtimeClass
+@inline def apply%5BT%5D(runtimeClass1
 : jClass%5B_%5D): ClassTag%5B
-_
+T
 %5D =%0A    
-  
 runtimeClass
+1
  match %7B%0A      
- 
- 
 case 
-x if x.isPrimitive =%3E primitiveClassTag(runtimeClass)%0A        case ObjectTYPE         =%3E ClassTag.Object%0A        case Nothing
+java.lang.Byte.
 TYPE      
-  
 =%3E ClassTag.
-Nothing%0A        case NullTYPE           =%3E ClassTag.Null%0A        case _                  =%3E new GenericClassTag%5BAnyRef%5D(runtimeClass)%0A     %7D%0A%0A    private def primitiveClassTag%5BT%5D(runtimeClass: Class%5B_%5D): ClassTag%5B_%5D = runtimeClass match %7B
+Byte.asInstanceOf%5BClassTag%5BT%5D%5D
 %0A      case java.lang.
-Byte
+Short
 .TYPE     
- 
 =%3E ClassTag.
-Byte%0A      case java.lang.Short.TYPE     =%3E 
+Short.asInstanceOf%5B
 ClassTag
-.Short
+%5BT%5D%5D
 %0A      case java.lang.Character.TYPE =%3E ClassTag.Char
+.asInstanceOf%5BClassTag%5BT%5D%5D
 %0A      case java.lang.Integer.TYPE   =%3E ClassTag.Int
+.asInstanceOf%5BClassTag%5BT%5D%5D
 %0A      case java.lang.Long.TYPE      =%3E ClassTag.Long
+.asInstanceOf%5BClassTag%5BT%5D%5D
 %0A      case java.lang.Float.TYPE     =%3E ClassTag.Float
+.asInstanceOf%5BClassTag%5BT%5D%5D
 %0A      case java.lang.Double.TYPE    =%3E ClassTag.Double
+.asInstanceOf%5BClassTag%5BT%5D%5D
 %0A      case java.lang.Boolean.TYPE   =%3E ClassTag.Boolean
+.asInstanceOf%5BClassTag%5BT%5D%5D
 %0A      case java.lang.Void.TYPE      =%3E ClassTag.Unit
-%0A    %7D%0A  %7D%0A%0A  @SerialVersionUID(1L)%0A  private class GenericClassTag%5BT%5D(val runtimeClass: jClass%5B_%5D) extends ClassTag%5BT%5D %7B%0A    override def newArray(len: Int): Array%5BT%5D = %7B%0A      if (len == 0) emptyArray%0A      else java.lang.reflect.Array.newInstance(runtimeClass, len)
+.asInstanceOf%5BClassTag%5BT%5D%5D%0A      case _                        =%3E%0A        if (classOf%5Bjava.lang.Object%5D == runtimeClass1) %7B%0A          ClassTag.Object
 .asInstanceOf%5B
-Array
+ClassTag
 %5BT%5D%5D%0A    
-%7D%0A
+  
   %7D
-%0A%0A  def apply%5BT%5D(runtimeClass1: jClass%5B_%5D): ClassTag%5BT%5D = %7B%0A    if (cacheDisabled) %7B%0A      cache.computeTag(runtimeClass1)
+ else if (classOf%5Bscala.runtime.Nothing$%5D == runtimeClass1) %7B%0A          ClassTag.Nothing
 .asInstanceOf%5BClassTag%5BT%5D%5D%0A
+    
     %7D else 
-%7B%0A      val ref = cache.get(runtimeClass1).asInstanceOf%5BjWeakReference
+if (classOf%5Bscala.runtime.Null$%5D == runtimeClass1) %7B%0A          ClassTag.Null.asInstanceOf
 %5BClassTag%5BT%5D%5D
-%5D
 %0A    
-  var tag = ref.get%0A      if (tag == null) %7B%0A        cache.remove(runtimeClass1)%0A        tag = cache.computeTag(runtimeClass1).asInstanceOf%5BClassTag%5BT%5D%5D%0A      %7D%0A      tag%0A    %7D%0A  %7D%0A%0A 
+%7D else %7B%0A          new ClassTag%5BT%5D%7B def runtimeClass = runtimeClass1 %7D%0A    %7D%0A  %7D%0A%0A  @inline
  def unapply%5BT%5D(ctag: ClassTag%5BT%5D): Option%5BClass%5B_%5D%5D =
+%0A   
  Some(ctag.runtimeClass)%0A%7D%0A
