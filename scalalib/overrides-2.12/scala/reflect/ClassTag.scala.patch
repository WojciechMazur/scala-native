--- scalalib/target/scalaSources/2.12.13/scala/reflect/ClassTag.scala	2021-02-20 19:51:39.333018444 +0100
+++ scalalib/overrides-2.12/scala/reflect/ClassTag.scala	2021-02-01 18:02:23.029750912 +0100
@@ -16,6 +16,5 @@
 import java.lang.{ Class => jClass }
-import java.lang.ref.{WeakReference => jWeakReference}
-
 import scala.collection.mutable
-import scala.runtime.BoxedUnit
+
+/* Override for default scala ClassTag due to missing caching using java.lang.Value.ClassValue */
 
@@ -53,7 +52,5 @@
 
-  @transient private[scala] lazy val emptyArray       : Array[T]                = {
-    val componentType =
-      if (runtimeClass eq java.lang.Void.TYPE) classOf[BoxedUnit] else runtimeClass
-    java.lang.reflect.Array.newInstance(componentType, 0).asInstanceOf[Array[T]]
-  }
+  @transient private[scala] lazy val emptyArray: Array[T] =
+    newArray(0)
+
   @transient private[scala] lazy val emptyWrappedArray: mutable.WrappedArray[T] =
@@ -74,3 +71,2 @@
   override def newArray(len: Int): Array[T] = {
-    if (runtimeClass.isPrimitive) {
       runtimeClass match {
@@ -85,5 +81,3 @@
         case java.lang.Void.TYPE      => new Array[Unit](len).asInstanceOf[Array[T]]
-      }
-    } else {
-      java.lang.reflect.Array.newInstance(runtimeClass, len).asInstanceOf[Array[T]]
+      case _                        => java.lang.reflect.Array.newInstance(runtimeClass, len).asInstanceOf[Array[T]]
     }
@@ -119,68 +113,38 @@
 object ClassTag {
-  private val ObjectTYPE = classOf[java.lang.Object]
-  private val NothingTYPE = classOf[scala.runtime.Nothing$]
-  private val NullTYPE = classOf[scala.runtime.Null$]
-
-  val Byte    : ClassTag[scala.Byte]       = Manifest.Byte
-  val Short   : ClassTag[scala.Short]      = Manifest.Short
-  val Char    : ClassTag[scala.Char]       = Manifest.Char
-  val Int     : ClassTag[scala.Int]        = Manifest.Int
-  val Long    : ClassTag[scala.Long]       = Manifest.Long
-  val Float   : ClassTag[scala.Float]      = Manifest.Float
-  val Double  : ClassTag[scala.Double]     = Manifest.Double
-  val Boolean : ClassTag[scala.Boolean]    = Manifest.Boolean
-  val Unit    : ClassTag[scala.Unit]       = Manifest.Unit
-  val Any     : ClassTag[scala.Any]        = Manifest.Any
-  val Object  : ClassTag[java.lang.Object] = Manifest.Object
-  val AnyVal  : ClassTag[scala.AnyVal]     = Manifest.AnyVal
-  val AnyRef  : ClassTag[scala.AnyRef]     = Manifest.AnyRef
-  val Nothing : ClassTag[scala.Nothing]    = Manifest.Nothing
-  val Null    : ClassTag[scala.Null]       = Manifest.Null
-
-  private val cacheDisabled = java.lang.Boolean.getBoolean("scala.reflect.classtag.cache.disable")
-  private[this] object cache extends ClassValue[jWeakReference[ClassTag[_]]] {
-    override def computeValue(runtimeClass: jClass[_]): jWeakReference[ClassTag[_]] =
-      new jWeakReference(computeTag(runtimeClass))
-
-    def computeTag(runtimeClass: jClass[_]): ClassTag[_] =
-      runtimeClass match {
-        case x if x.isPrimitive => primitiveClassTag(runtimeClass)
-        case ObjectTYPE         => ClassTag.Object
-        case NothingTYPE        => ClassTag.Nothing
-        case NullTYPE           => ClassTag.Null
-        case _                  => new GenericClassTag[AnyRef](runtimeClass)
-     }
-
-    private def primitiveClassTag[T](runtimeClass: Class[_]): ClassTag[_] = runtimeClass match {
-      case java.lang.Byte.TYPE      => ClassTag.Byte
-      case java.lang.Short.TYPE     => ClassTag.Short
-      case java.lang.Character.TYPE => ClassTag.Char
-      case java.lang.Integer.TYPE   => ClassTag.Int
-      case java.lang.Long.TYPE      => ClassTag.Long
-      case java.lang.Float.TYPE     => ClassTag.Float
-      case java.lang.Double.TYPE    => ClassTag.Double
-      case java.lang.Boolean.TYPE   => ClassTag.Boolean
-      case java.lang.Void.TYPE      => ClassTag.Unit
-    }
-  }
-
-  @SerialVersionUID(1L)
-  private class GenericClassTag[T](val runtimeClass: jClass[_]) extends ClassTag[T] {
-    override def newArray(len: Int): Array[T] = {
-      if (len == 0) emptyArray
-      else java.lang.reflect.Array.newInstance(runtimeClass, len).asInstanceOf[Array[T]]
-    }
-  }
-
-  def apply[T](runtimeClass1: jClass[_]): ClassTag[T] = {
-    if (cacheDisabled) {
-      cache.computeTag(runtimeClass1).asInstanceOf[ClassTag[T]]
+  @inline def Byte    : ClassTag[scala.Byte]       = Manifest.Byte
+  @inline def Short   : ClassTag[scala.Short]      = Manifest.Short
+  @inline def Char    : ClassTag[scala.Char]       = Manifest.Char
+  @inline def Int     : ClassTag[scala.Int]        = Manifest.Int
+  @inline def Long    : ClassTag[scala.Long]       = Manifest.Long
+  @inline def Float   : ClassTag[scala.Float]      = Manifest.Float
+  @inline def Double  : ClassTag[scala.Double]     = Manifest.Double
+  @inline def Boolean : ClassTag[scala.Boolean]    = Manifest.Boolean
+  @inline def Unit    : ClassTag[scala.Unit]       = Manifest.Unit
+  @inline def Any     : ClassTag[scala.Any]        = Manifest.Any
+  @inline def Object  : ClassTag[java.lang.Object] = Manifest.Object
+  @inline def AnyVal  : ClassTag[scala.AnyVal]     = Manifest.AnyVal
+  @inline def AnyRef  : ClassTag[scala.AnyRef]     = Manifest.AnyRef
+  @inline def Nothing : ClassTag[scala.Nothing]    = Manifest.Nothing
+  @inline def Null    : ClassTag[scala.Null]       = Manifest.Null
+
+  @inline def apply[T](runtimeClass1: jClass[_]): ClassTag[T] =
+    runtimeClass1 match {
+      case java.lang.Byte.TYPE      => ClassTag.Byte.asInstanceOf[ClassTag[T]]
+      case java.lang.Short.TYPE     => ClassTag.Short.asInstanceOf[ClassTag[T]]
+      case java.lang.Character.TYPE => ClassTag.Char.asInstanceOf[ClassTag[T]]
+      case java.lang.Integer.TYPE   => ClassTag.Int.asInstanceOf[ClassTag[T]]
+      case java.lang.Long.TYPE      => ClassTag.Long.asInstanceOf[ClassTag[T]]
+      case java.lang.Float.TYPE     => ClassTag.Float.asInstanceOf[ClassTag[T]]
+      case java.lang.Double.TYPE    => ClassTag.Double.asInstanceOf[ClassTag[T]]
+      case java.lang.Boolean.TYPE   => ClassTag.Boolean.asInstanceOf[ClassTag[T]]
+      case java.lang.Void.TYPE      => ClassTag.Unit.asInstanceOf[ClassTag[T]]
+      case _                        =>
+        if (classOf[java.lang.Object] == runtimeClass1) {
+          ClassTag.Object.asInstanceOf[ClassTag[T]]
+        } else if (classOf[scala.runtime.Nothing$] == runtimeClass1) {
+          ClassTag.Nothing.asInstanceOf[ClassTag[T]]
+        } else if (classOf[scala.runtime.Null$] == runtimeClass1) {
+          ClassTag.Null.asInstanceOf[ClassTag[T]]
     } else {
-      val ref = cache.get(runtimeClass1).asInstanceOf[jWeakReference[ClassTag[T]]]
-      var tag = ref.get
-      if (tag == null) {
-        cache.remove(runtimeClass1)
-        tag = cache.computeTag(runtimeClass1).asInstanceOf[ClassTag[T]]
-      }
-      tag
+          new ClassTag[T]{ def runtimeClass = runtimeClass1 }
     }
@@ -188,3 +152,4 @@
 
-  def unapply[T](ctag: ClassTag[T]): Option[Class[_]] = Some(ctag.runtimeClass)
+  @inline def unapply[T](ctag: ClassTag[T]): Option[Class[_]] =
+    Some(ctag.runtimeClass)
 }
