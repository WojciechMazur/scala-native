--- 2.13.4/scala/Array.scala
+++ overrides-2.13.4/scala/Array.scala
@@ -20,1 +20,1 @@
-import scala.reflect.ClassTag
+import scala.reflect.{ClassTag, classTag}
@@ -22,0 +22,1 @@
+import scala.runtime.ScalaRunTime
@@ -23,1 +24,0 @@
-
@@ -27,2 +27,1 @@
- *  val a = Array(1, 2)
- *  val b = Array.ofDim[Int](2)
+ *  val a = Array(1, 2) *  val b = Array.ofDim[Int](2)
@@ -32,2 +31,1 @@
- *  `Array(1, 2)`, `Array(0, 0)` and `Array(1, 2, 0, 0)`.
- */
+ *  `Array(1, 2)`, `Array(0, 0)` and `Array(1, 2, 0, 0)`. */
@@ -37,2 +35,1 @@
-  val emptyCharArray    = new Array[Char](0)
-  val emptyDoubleArray  = new Array[Double](0)
+  val emptyCharArray    = new Array[Char](0)  val emptyDoubleArray  = new Array[Double](0)
@@ -42,2 +39,1 @@
-  val emptyShortArray   = new Array[Short](0)
-  val emptyObjectArray  = new Array[Object](0)
+  val emptyShortArray   = new Array[Short](0)  val emptyObjectArray  = new Array[Object](0)
@@ -47,2 +43,1 @@
-  @SerialVersionUID(3L)
-  private class ArrayFactory[A : ClassTag](dummy: Array.type) extends Factory[A, Array[A]] with Serializable {
+  @SerialVersionUID(3L)  private class ArrayFactory[A : ClassTag](dummy: Array.type) extends Factory[A, Array[A]] with Serializable {
@@ -52,1 +47,0 @@
-
@@ -124,1 +118,2 @@
-    case x: Array[BoxedUnit]  => newUnitArray(newLength).asInstanceOf[Array[A]]
+//  We cannot distinguish Array[BoxedUnit] from Array[Object] in Scala Native
+//	case x: Array[BoxedUnit]  => newUnitArray(newLength).asInstanceOf[Array[A]]
@@ -126,2 +121,1 @@
-    case x: Array[Int]        => java.util.Arrays.copyOf(x, newLength)
-    case x: Array[Double]     => java.util.Arrays.copyOf(x, newLength)
+    case x: Array[Int]        => java.util.Arrays.copyOf(x, newLength)    case x: Array[Double]     => java.util.Arrays.copyOf(x, newLength)
@@ -131,2 +125,1 @@
-    case x: Array[Byte]       => java.util.Arrays.copyOf(x, newLength)
-    case x: Array[Short]      => java.util.Arrays.copyOf(x, newLength)
+    case x: Array[Byte]       => java.util.Arrays.copyOf(x, newLength)    case x: Array[Short]      => java.util.Arrays.copyOf(x, newLength)
@@ -136,2 +129,1 @@
-  /** Copy one array to another, truncating or padding with default values (if
-    * necessary) so the copy has the specified length. The new array can have
+  /** Copy one array to another, truncating or padding with default values (if    * necessary) so the copy has the specified length. The new array can have
@@ -141,2 +133,1 @@
-    *
-    * Equivalent to Java's
+    *    * Equivalent to Java's
@@ -146,2 +137,1 @@
-    *
-    * @see `java.util.Arrays#copyOf`
+    *    * @see `java.util.Arrays#copyOf`
@@ -151,2 +141,1 @@
-    if (runtimeClass == Void.TYPE) newUnitArray(newLength).asInstanceOf[Array[A]]
-    else {
+    if (runtimeClass == Void.TYPE) newUnitArray(newLength).asInstanceOf[Array[A]]    else {
@@ -156,2 +145,1 @@
-        else {
-          val destArrayClass = java.lang.reflect.Array.newInstance(destClass, 0).getClass.asInstanceOf[Class[Array[AnyRef]]]
+        else {          val destArrayClass = java.lang.reflect.Array.newInstance(destClass, 0).getClass.asInstanceOf[Class[Array[AnyRef]]]
@@ -185,5 +173,16 @@
-    val array = new Array[T](xs.length)
-    val iterator = xs.iterator
-    var i = 0
-    while (iterator.hasNext) {
-      array(i) = iterator.next(); i += 1
+    val len = xs.length
+    xs match {
+      case wa: immutable.ArraySeq[_] if wa.unsafeArray.getClass.getComponentType == classTag[T].runtimeClass =>
+        // We get here in test/files/run/sd760a.scala, `Array[T](t)` for
+        // a specialized type parameter `T`. While we still pay for two
+        // copies of the array it is better than before when we also boxed
+        // each element when populating the result.
+        ScalaRunTime.array_clone(wa.unsafeArray).asInstanceOf[Array[T]]
+      case _ =>
+        val array = new Array[T](len)
+        val iterator = xs.iterator
+        var i = 0
+        while (iterator.hasNext) {
+          array(i) = iterator.next(); i += 1
+        }
+        array
@@ -191,1 +190,0 @@
-    array
@@ -193,1 +191,0 @@
-
@@ -197,2 +194,1 @@
-    val array = new Array[Boolean](xs.length + 1)
-    array(0) = x
+    val array = new Array[Boolean](xs.length + 1)    array(0) = x
@@ -202,2 +198,1 @@
-      array(i) = iterator.next(); i += 1
-    }
+      array(i) = iterator.next(); i += 1    }
@@ -207,2 +202,1 @@
-  /** Creates an array of `Byte` objects */
-  // Subject to a compiler optimization in Cleanup, see above.
+  /** Creates an array of `Byte` objects */  // Subject to a compiler optimization in Cleanup, see above.
@@ -212,2 +206,1 @@
-    val iterator = xs.iterator
-    var i = 1
+    val iterator = xs.iterator    var i = 1
@@ -217,2 +210,1 @@
-    array
-  }
+    array  }
@@ -222,2 +214,1 @@
-  def apply(x: Short, xs: Short*): Array[Short] = {
-    val array = new Array[Short](xs.length + 1)
+  def apply(x: Short, xs: Short*): Array[Short] = {    val array = new Array[Short](xs.length + 1)
@@ -538,12 +529,21 @@
-  def equals(xs: Array[AnyRef], ys: Array[AnyRef]): Boolean = {
-    if (xs eq ys)
-      return true
-    if (xs.length != ys.length)
-      return false
-
-    val len = xs.length
-    var i = 0
-    while (i < len) {
-      if (xs(i) != ys(i))
-        return false
-      i += 1
+  /** Compare two arrays per element.
+   *
+   *  A more efficient version of `xs.sameElements(ys)`.
+   *
+   *  Note that arrays are invariant in Scala, but it may
+   *  be sound to cast an array of arbitrary reference type
+   *  to `Array[AnyRef]`. Arrays on the JVM are covariant
+   *  in their element type.
+   *
+   *  `Array.equals(xs.asInstanceOf[Array[AnyRef]], ys.asInstanceOf[Array[AnyRef]])`
+   *
+   *  @param xs an array of AnyRef
+   *  @param ys an array of AnyRef
+   *  @return true if corresponding elements are equal
+   */
+  def equals(xs: Array[AnyRef], ys: Array[AnyRef]): Boolean =
+    (xs eq ys) ||
+    (xs.length == ys.length) && {
+      var i = 0
+      while (i < xs.length && xs(i) == ys(i)) i += 1
+      i >= xs.length
@@ -551,2 +551,0 @@
-    true
-  }
@@ -554,2 +552,1 @@
-  /** Called in a pattern match like `{ case Array(x,y,z) => println('3 elements')}`.
-   *
+  /** Called in a pattern match like `{ case Array(x,y,z) => println('3 elements')}`.   *
@@ -562,1 +559,1 @@
-    def isEmpty: Boolean = false
+    def isEmpty: false = false
@@ -564,2 +561,1 @@
-    def lengthCompare(len: Int): Int = a.lengthCompare(len)
-    def apply(i: Int): T = a(i)
+    def lengthCompare(len: Int): Int = a.lengthCompare(len)    def apply(i: Int): T = a(i)
@@ -570,1 +566,0 @@
-
@@ -574,2 +569,1 @@
- *  {{{
- *  val numbers = Array(1, 2, 3, 4)
+ *  {{{ *  val numbers = Array(1, 2, 3, 4)
@@ -579,2 +573,1 @@
- *  }}}
- *
+ *  }}} *
@@ -584,2 +577,1 @@
- *  `update(Int, T)`.
- *
+ *  `update(Int, T)`. *
@@ -589,2 +581,1 @@
- *  Both types make available many of the standard operations found in the Scala collections API.
- *  The conversion to `ArrayOps` is temporary, as all operations defined on `ArrayOps` return an `Array`,
+ *  Both types make available many of the standard operations found in the Scala collections API. *  The conversion to `ArrayOps` is temporary, as all operations defined on `ArrayOps` return an `Array`,
@@ -594,2 +585,1 @@
- *  consider the following code:
- *
+ *  consider the following code: *
@@ -607,3 +597,3 @@
- *  @see [[http://www.scala-lang.org/files/archive/spec/2.13/ Scala Language Specification]], for in-depth information on the transformations the Scala compiler makes on Arrays (Sections 6.6 and 6.15 respectively.)
- *  @see [[http://docs.scala-lang.org/sips/completed/scala-2-8-arrays.html "Scala 2.8 Arrays"]] the Scala Improvement Document detailing arrays since Scala 2.8.
- *  @see [[http://docs.scala-lang.org/overviews/collections/arrays.html "The Scala 2.8 Collections' API"]] section on `Array` by Martin Odersky for more information.
+ *  @see [[https://www.scala-lang.org/files/archive/spec/2.13/ Scala Language Specification]], for in-depth information on the transformations the Scala compiler makes on Arrays (Sections 6.6 and 6.15 respectively.)
+ *  @see [[https://docs.scala-lang.org/sips/completed/scala-2-8-arrays.html "Scala 2.8 Arrays"]] the Scala Improvement Document detailing arrays since Scala 2.8.
+ *  @see [[https://docs.scala-lang.org/overviews/collections/arrays.html "The Scala 2.8 Collections' API"]] section on `Array` by Martin Odersky for more information.
@@ -611,2 +601,1 @@
- *  @hideImplicitConversion scala.Predef.byteArrayOps
- *  @hideImplicitConversion scala.Predef.charArrayOps
+ *  @hideImplicitConversion scala.Predef.byteArrayOps *  @hideImplicitConversion scala.Predef.charArrayOps
@@ -616,2 +605,1 @@
- *  @hideImplicitConversion scala.Predef.longArrayOps
- *  @hideImplicitConversion scala.Predef.refArrayOps
+ *  @hideImplicitConversion scala.Predef.longArrayOps *  @hideImplicitConversion scala.Predef.refArrayOps
@@ -621,2 +609,1 @@
- *  @hideImplicitConversion scala.LowPriorityImplicits.wrapIntArray
- *  @hideImplicitConversion scala.LowPriorityImplicits.wrapDoubleArray
+ *  @hideImplicitConversion scala.LowPriorityImplicits.wrapIntArray *  @hideImplicitConversion scala.LowPriorityImplicits.wrapDoubleArray
@@ -626,2 +613,1 @@
- *  @hideImplicitConversion scala.LowPriorityImplicits.wrapByteArray
- *  @hideImplicitConversion scala.LowPriorityImplicits.wrapShortArray
+ *  @hideImplicitConversion scala.LowPriorityImplicits.wrapByteArray *  @hideImplicitConversion scala.LowPriorityImplicits.wrapShortArray
@@ -631,2 +617,1 @@
- *  @define coll array
- *  @define Coll `Array`
+ *  @define coll array *  @define Coll `Array`
@@ -636,2 +621,1 @@
- *  @define willNotTerminateInf
- *  @define collectExample
+ *  @define willNotTerminateInf *  @define collectExample
@@ -641,1 +625,0 @@
-
