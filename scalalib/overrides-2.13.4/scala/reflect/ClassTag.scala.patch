--- 2.13.4/scala/reflect/ClassTag.scala
+++ overrides-2.13.4/scala/reflect/ClassTag.scala
@@ -76,2 +76,2 @@
-    if (runtimeClass.isInstance(x)) Some(x.asInstanceOf[T])
-    else None
+	if (runtimeClass.isInstance(x)) Some(x.asInstanceOf[T])
+	else None
@@ -84,4 +84,4 @@
-    def prettyprint(clazz: jClass[_]): String =
-      if (clazz.isArray) s"Array[${prettyprint(clazz.getComponentType)}]" else
-      clazz.getName
-    prettyprint(runtimeClass)
+	def prettyprint(clazz: jClass[_]): String =
+	  if (clazz.isArray) s"Array[${prettyprint(clazz.getComponentType)}]" else
+		clazz.getName
+	prettyprint(runtimeClass)
@@ -95,4 +95,0 @@
-  private[this] val ObjectTYPE = classOf[java.lang.Object]
-  private[this] val NothingTYPE = classOf[scala.runtime.Nothing$]
-  private[this] val NullTYPE = classOf[scala.runtime.Null$]
-
@@ -101,15 +97,15 @@
-  val Byte    : ByteManifest               = Manifest.Byte
-  val Short   : ShortManifest              = Manifest.Short
-  val Char    : CharManifest               = Manifest.Char
-  val Int     : IntManifest                = Manifest.Int
-  val Long    : LongManifest               = Manifest.Long
-  val Float   : FloatManifest              = Manifest.Float
-  val Double  : DoubleManifest             = Manifest.Double
-  val Boolean : BooleanManifest            = Manifest.Boolean
-  val Unit    : UnitManifest               = Manifest.Unit
-  val Any     : ClassTag[scala.Any]        = Manifest.Any
-  val Object  : ClassTag[java.lang.Object] = Manifest.Object
-  val AnyVal  : ClassTag[scala.AnyVal]     = Manifest.AnyVal
-  val AnyRef  : ClassTag[scala.AnyRef]     = Manifest.AnyRef
-  val Nothing : ClassTag[scala.Nothing]    = Manifest.Nothing
-  val Null    : ClassTag[scala.Null]       = Manifest.Null
+  @inline def Byte    : ByteManifest               = Manifest.Byte
+  @inline def Short   : ShortManifest              = Manifest.Short
+  @inline def Char    : CharManifest               = Manifest.Char
+  @inline def Int     : IntManifest                = Manifest.Int
+  @inline def Long    : LongManifest               = Manifest.Long
+  @inline def Float   : FloatManifest              = Manifest.Float
+  @inline def Double  : DoubleManifest             = Manifest.Double
+  @inline def Boolean : BooleanManifest            = Manifest.Boolean
+  @inline def Unit    : UnitManifest               = Manifest.Unit
+  @inline def Any     : ClassTag[scala.Any]        = Manifest.Any
+  @inline def Object  : ClassTag[java.lang.Object] = Manifest.Object
+  @inline def AnyVal  : ClassTag[scala.AnyVal]     = Manifest.AnyVal
+  @inline def AnyRef  : ClassTag[scala.AnyRef]     = Manifest.AnyRef
+  @inline def Nothing : ClassTag[scala.Nothing]    = Manifest.Nothing
+  @inline def Null    : ClassTag[scala.Null]       = Manifest.Null
@@ -119,2 +115,1 @@
-    override def newArray(len: Int): Array[T] = {
-      java.lang.reflect.Array.newInstance(runtimeClass, len).asInstanceOf[Array[T]]
+    override def newArray(len: Int): Array[T] = {      java.lang.reflect.Array.newInstance(runtimeClass, len).asInstanceOf[Array[T]]
@@ -125,1 +120,1 @@
-    runtimeClass1 match {
+	runtimeClass1 match {
@@ -129,2 +124,1 @@
-      case java.lang.Integer.TYPE   => ClassTag.Int.asInstanceOf[ClassTag[T]]
-      case java.lang.Long.TYPE      => ClassTag.Long.asInstanceOf[ClassTag[T]]
+      case java.lang.Integer.TYPE   => ClassTag.Int.asInstanceOf[ClassTag[T]]      case java.lang.Long.TYPE      => ClassTag.Long.asInstanceOf[ClassTag[T]]
@@ -135,4 +129,8 @@
-      case ObjectTYPE               => ClassTag.Object.asInstanceOf[ClassTag[T]]
-      case NothingTYPE              => ClassTag.Nothing.asInstanceOf[ClassTag[T]]
-      case NullTYPE                 => ClassTag.Null.asInstanceOf[ClassTag[T]]
-      case _                        => new GenericClassTag[T](runtimeClass1)
+      case _ =>
+        if (classOf[java.lang.Object] == runtimeClass1)
+		  ClassTag.Object.asInstanceOf[ClassTag[T]]
+        else if (classOf[scala.runtime.Nothing$] == runtimeClass1)
+          ClassTag.Nothing.asInstanceOf[ClassTag[T]]
+        else if (classOf[scala.runtime.Null$] == runtimeClass1)
+          ClassTag.Null.asInstanceOf[ClassTag[T]]
+        else new GenericClassTag[T](runtimeClass1)
