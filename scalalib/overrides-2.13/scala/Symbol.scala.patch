--- 2.13.6/scala/Symbol.scala
+++ overrides-2.13/scala/Symbol.scala
@@ -35,1 +35,1 @@
-object Symbol extends UniquenessCache[String, Symbol] {
+object Symbol extends UniquenessCache[Symbol] {
@@ -37,2 +37,1 @@
-  protected def valueFromKey(name: String): Symbol = new Symbol(name)
-  protected def keyFromValue(sym: Symbol): Option[String] = Some(sym.name)
+  protected def valueFromKey(name: String): Symbol = new Symbol(name)  protected def keyFromValue(sym: Symbol): Option[String] = Some(sym.name)
@@ -41,7 +40,2 @@
-/** This is private so it won't appear in the library API, but
-  * abstracted to offer some hope of reusability.  */
-private[scala] abstract class UniquenessCache[K, V >: Null]
-{
-  import java.lang.ref.WeakReference
-  import java.util.WeakHashMap
-  import java.util.concurrent.locks.ReentrantReadWriteLock
+private[scala] abstract class UniquenessCache[V] {
+  private val cache = collection.mutable.Map.empty[String, V]
@@ -49,4 +43,2 @@
-  private[this] val rwl = new ReentrantReadWriteLock()
-  private[this] val rlock = rwl.readLock
-  private[this] val wlock = rwl.writeLock
-  private[this] val map = new WeakHashMap[K, WeakReference[V]]
+  protected def valueFromKey(k: String): V
+  protected def keyFromValue(v: V): Option[String]
@@ -54,2 +46,2 @@
-  protected def valueFromKey(k: K): V
-  protected def keyFromValue(v: V): Option[K]
+  def apply(name: String): V =
+    cache.getOrElseUpdate(name, valueFromKey(name))
@@ -57,34 +49,1 @@
-  def apply(name: K): V = {
-    def cached(): V = {
-      rlock.lock
-      try {
-        val reference = map get name
-        if (reference == null) null
-        else reference.get  // will be null if we were gc-ed
-      }
-      finally rlock.unlock
-    }
-    def updateCache(): V = {
-      wlock.lock
-      try {
-        val res = cached()
-        if (res != null) res
-        else {
-          // If we don't remove the old String key from the map, we can
-          // wind up with one String as the key and a different String as
-          // the name field in the Symbol, which can lead to surprising GC
-          // behavior and duplicate Symbols. See scala/bug#6706.
-          map remove name
-          val sym = valueFromKey(name)
-          map.put(name, new WeakReference(sym))
-          sym
-        }
-      }
-      finally wlock.unlock
-    }
-
-    val res = cached()
-    if (res == null) updateCache()
-    else res
-  }
-  def unapply(other: V): Option[K] = keyFromValue(other)
+  def unapply(other: V): Option[String] = keyFromValue(other)
